/*
 * Scala class for entity "${entity.name}" 
 * Created on $now.date ( $now.time ) generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------
#set($env.language = "Scala")
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------

package ${target.javaPackageFromFolder(${SRC})};

## imports for LocalDate, LocalTime, LocalDateTime if used in entity fields
#set($imports = {})
#foreach( $attrib in $entity.attributes )
#if ($attrib.type == "LocalDate"     )#set($imports["java.time.LocalDate"] = true)#end
#if ($attrib.type == "LocalTime"     )#set($imports["java.time.LocalTime"] = true)#end
#if ($attrib.type == "LocalDateTime" )#set($imports["java.time.LocalDateTime"] = true)#end
#end
#foreach($key in $imports.keySet() )
import $key
#end

class ${entity.name}() {

    // Entity Primary Key
#foreach( $attrib in $entity.keyAttributes )
    var ${attrib.name}: $attrib.type = _ 
#end

    // Entity other fields
#foreach( $attrib in $dataFields )
    var ${attrib.name}: $attrib.type = _ 
#end

    // Entity links
#foreach( $link in $entity.selectedLinks )
    var ${link.fieldName}: ${link.fieldType} = _
#end

## build list with all PK fields 
#set($pkTypes = [])
#foreach( $attrib in $entity.keyAttributes )
#set($r = $pkTypes.add("${attrib.name}: $attrib.type") )
#end
#set($PKargs = $fn.join($pkTypes,", ") )
    // Constructor with PK initialization
    def this($PKargs) = {
        this()
#foreach( $attrib in $entity.keyAttributes )
        this.${attrib.name} = ${attrib.name}
#end
    }

    // Set PK field(s)
    def setPK($PKargs) : Unit = { 
#foreach( $attrib in $entity.keyAttributes )
        this.${attrib.name} = ${attrib.name}
#end
    }

## build list with all PK fields ( [] is java.util.ArrayList )
#set($pkNames = [])
#foreach( $attrib in $entity.keyAttributes )
#set($r = $pkNames.add(${attrib.name}) )
#end
    override def toString: String = {
        // print PK fields
        s"($fn.joinWithPrefixSuffix($pkNames, ", ", "$", ""))" 
    }

}
/*
#set( $keyValues = $fn.buildValues($entity.keyAttributes, 1) )
var o = new ${entity.name}($keyValues.allValues)
println(o)
*/
